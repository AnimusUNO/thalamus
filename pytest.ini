[tool:pytest]
# Pytest Configuration for Thalamus Testing Suite

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers for different test types
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - full system tests
    slow: Slow tests that take more than 5 seconds
    asyncio: Async tests requiring special handling
    database: Tests that require database access
    api: API endpoint tests
    performance: Performance and load tests
    security: Security-related tests
    smoke: Smoke tests for basic functionality

# Test execution
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=examples
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=test-results.xml
    --html=test-report.html
    --self-contained-html

# Async testing configuration
asyncio_mode = auto

# Test timeout (in seconds)
timeout = 300

# Minimum version requirements
minversion = 7.0

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/test.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test collection
collect_ignore =
    setup.py
    build
    dist
    venv
    .git
    __pycache__
    *.pyc
    *.pyo
    *.pyd
    .pytest_cache
    htmlcov
    coverage.xml
    test-results.xml
    test-report.html

# Coverage configuration
[coverage:run]
source = examples
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    setup.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
