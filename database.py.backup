from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey, Text, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime

# Create SQLAlchemy engine
engine = create_engine('sqlite:///thalamus.db', echo=True)

# Create session factory
Session = sessionmaker(bind=engine)

# Create declarative base
Base = declarative_base()

class DBSession(Base):
    __tablename__ = 'sessions'
    
    id = Column(Integer, primary_key=True)
    session_id = Column(String, unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    segments = relationship("Segment", back_populates="session")
    refined_segments = relationship("RefinedSegment", back_populates="session")

class Speaker(Base):
    __tablename__ = 'speakers'
    
    id = Column(Integer, primary_key=True)
    speaker_id = Column(Integer, nullable=False)
    speaker_name = Column(String, nullable=False)
    is_user = Column(Boolean, default=False)
    
    segments = relationship("Segment", back_populates="speaker")

class Segment(Base):
    __tablename__ = 'segments'
    
    id = Column(Integer, primary_key=True)
    session_id = Column(Integer, ForeignKey('sessions.id'))
    speaker_id = Column(Integer, ForeignKey('speakers.id'))
    text = Column(Text, nullable=False)
    start_time = Column(Float, nullable=False)
    end_time = Column(Float, nullable=False)
    log_timestamp = Column(DateTime, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    session = relationship("DBSession", back_populates="segments")
    speaker = relationship("Speaker", back_populates="segments")

class RefinedSegment(Base):
    __tablename__ = 'refined_segments'
    
    id = Column(Integer, primary_key=True)
    session_id = Column(Integer, ForeignKey('sessions.id'))
    refined_speaker_id = Column(String, nullable=False)
    text = Column(Text, nullable=False)
    start_time = Column(Float, nullable=False)
    end_time = Column(Float, nullable=False)
    confidence_score = Column(Float, nullable=False)
    source_segments = Column(Text, nullable=False)
    last_updated = Column(DateTime, default=datetime.utcnow)
    is_locked = Column(Boolean, default=False)
    metadata = Column(JSON)
    
    session = relationship("DBSession", back_populates="refined_segments")

def init_db():
    """Initialize database tables."""
    Base.metadata.create_all(bind=engine) 